//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Personnages/Animation/PlayeurInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayeurInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayeurInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayeurInput"",
    ""maps"": [
        {
            ""name"": ""charactersControle"",
            ""id"": ""52feb806-4070-421e-a2f7-cc91bcac3ed1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cb4786ed-3e5d-4ab1-8c5f-ea06be8553f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ebf6440d-ce4a-4a80-b227-e9c233d4a034"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""be85e6dc-3e3e-4937-9572-3717557ef826"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c5059c4-2dbc-49b6-a041-5f538e077b74"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03b7bf48-9b4b-4465-b95c-ffa112dc1eb5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9d9e189e-0ad1-43c1-aee4-d9a65952a731"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // charactersControle
        m_charactersControle = asset.FindActionMap("charactersControle", throwIfNotFound: true);
        m_charactersControle_Move = m_charactersControle.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // charactersControle
    private readonly InputActionMap m_charactersControle;
    private ICharactersControleActions m_CharactersControleActionsCallbackInterface;
    private readonly InputAction m_charactersControle_Move;
    public struct CharactersControleActions
    {
        private @PlayeurInput m_Wrapper;
        public CharactersControleActions(@PlayeurInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_charactersControle_Move;
        public InputActionMap Get() { return m_Wrapper.m_charactersControle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharactersControleActions set) { return set.Get(); }
        public void SetCallbacks(ICharactersControleActions instance)
        {
            if (m_Wrapper.m_CharactersControleActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharactersControleActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharactersControleActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharactersControleActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_CharactersControleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public CharactersControleActions @charactersControle => new CharactersControleActions(this);
    public interface ICharactersControleActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
